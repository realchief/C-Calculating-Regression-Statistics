1. DateTime construction
    Construction tests:
    a) 00:00:00 1st Jan 1970, using default constructor (must succeed)
    b) 23:59:59 31st Dec 1970, using time_t/__time64_t constructor (must succeed)
    c) 23:59:59 31st Dec 1970, using copy constructor with second object (must succeed)
    d) 13:52:30 14th Aug 2002, using COleDateTime constructor (must succeed)
    e) 13:52:31 14th Aug 2002, using CTime constructor (must succeed)
    f) 00:00:00.000 1st Mar 0004, using yr/mth/dy/h/m/s/ms constructor (must succeed)
    g) 00:00:00.000 29th Feb 4004, using yr/mth/dy/h/m/s/ms constructor (must succeed)
    h) 23:59:59.999 29th Feb 4004, using date/time constructor (must succeed)
    i) 23:59:59.999 29th Feb 0004, using yr/mth/dy/h/m/s/ms constructor (must fail)
    j) 00:00:00.000 1st Mar 4004, using yr/mth/dy/h/m/s/ms constructor (must fail)
    k) 23:59:59.999 29th Feb 0004, using date/time constructor (must fail)
    l) 00:00:00.000 1st Mar 4004, using date/time constructor (must fail)
    m) 00:00:00.000 1st Mar 4004, using COleDateTime constructor (must fail)

2. DateTime getter functions
    a) Construct DateTime object with 23:30:40.789 1st Dec 2002
    b) Test individual getters: year(), month(), day() etc.
    c) Test parameterless getDate()/getTime()
    d) Test parameterised getDate()/getTime()
    e) Test getIndex() function

3. DateTime setter functions
    a) Construct DateTime object
    b) With both variants of setDate()/setTime(), set date 31st July 2002, time 16:29:44.987
       and display in each case
    c) Try to set date 29th Feb 2002 - must fail with both setDate() functions
    d) Try to set date 29th Feb 0004 - must fail with both setDate() functions
    e) Try to set date 1st Mar 0004 - must succeed with both setDate() functions
    f) Try to set date 29th Feb 4004 - must succeed with both setDate() functions
    g) Try to set date 1st Mar 4004 - must fail with both setDate() functions
    h) Try to set time 24:00:00.000 - must fail with both setTime() functions
    i) Try to set time 00:60:00.000 - must fail with both setTime() functions
    j) Try to set time 00:00:60.000 - must fail with both setTime() functions

4. DateTime's now()/Local time/GMT functions
    a) Construct DateTime object with current date/time using now() function
    b) Convert to local time and display
    c) Convert back to GMT and display

5. Leap Years
    a) Construct DateTime objects for 1600, 1800, 1970, 1992, 1993, 2000, 2002 and 2040
    b) Return whether the above years are leap years using isLeapYear() function

6. daysInMonth()
    a) Use static daysInMonth() to return days in all months of 2000
    b) Use non-static single-parameter daysInMonth() to return days in all months for
           DateTime object constructed for year 2035
    c) Use non-static parameterless daysInMonth() on DateTime object set to 1st Jan 1970

7. DateTime conversion operators/functions
    a) Construct DateTime object with 00:00:00.000 1st Jan 1970
    b) Construct DateTime object with 12:06:03.000 15th Aug 2002
    c) Construct DateTime object with 00:00:00.000 1st Jan 100
    d) Construct DateTime object with 23:59:59.999 31st Dec 1969
    e) Construct DateTime object with 23:59:59.999 31st Dec 0099
    f) Attempt to convert above objects to seconds since 1970 using secsSince1970() -
       must succeed with all (display result for all conversions)
    g) Attempt to convert above objects to COleDateTime - must fail with last object
       (display result for successful conversions)
    h) Attempt to convert above objects to CTime - must fail with last three
       (display result for successful conversions)

8. DateTime comparison operators
    a) Construct DateTime object 'a' with 00:00:00.000 1st Jan 1970
    b) Construct DateTime object 'b' with 23:59:59.999 31st Dec 1969
    c) Construct DateTime object 'c' with 00:00:00.001 1st Jan 1970
    d) Construct DateTime object 'd' with 00:00:00.000 2nd Jan 1970
    e) operator==() must return true for (a == a), (b == b), (c == c) and (d == d)
       but false for all other combinations
    f) operator!=() must return false for (a != a), (b != b), (c != c) and (d != d)
       but true for all other combinations
    g) operator<() must return true for (a < c), (a < d), (a < c), (a < d),
       (b < a), (b < c), (b < d) and (c < d) but false for all other combinations
    h) operator<=() must return true for (a <= a), (a <= c), (a <= d), (b <= a),
       (b <= b), (b <= c), (b <= d), (c <= c), (c <= d) and (d <= d) but false for
       all other combinations
    i) operator>() must return true for (a > b), (c > a), (c > b), (d > a), (d > b) and
       (d > c) but false for all other combinations
    j) operator>=() must return true for (a >= a), (a >= b), (b >= b), (c >= a),
       (c >= b), (c >= c), (d >= a), (d >= b), (d >= c) and (d >= d) but false for all
       other combinations

9. DateTime assignment operators
    a) Create __time_t with value 86399
    b) Construct COleDateTime object with 23:59:59 1st Jan 1970
    c) Construct COleDateTime object with 23:59:59 29th Feb 4004
    d) Construct COleDateTime object with 00:00:00 1st Mar 4004
    e) Construct CTime object with 23:59:59 1st Jan 1970
    f) Construct five DateTime objects
    g) Assign __time_t value to first DateTime object - this must succeed
    h) Assign first COleDateTime object to second DateTime object - this must succeed
    i) Assign second COleDateTime object to third DateTime object - this must succeed
    j) Assign third COleDateTime object to fourth DateTime object - this must fail
       (DateTime object must be unchanged with value 00:00:00.000 1st Jan 1970)
    k) Assign CTime object to fifth DateTime object - this must succeed
    l) Compare first, second, third and fifth DateTime objects - all must be equal

10. DateTime toMillis()/fromMillis() functions
    a) Construct DateTime object with 00:00:00.000 1st Mar 0004
    b) Construct DateTime object with 00:01:00.000 1st Mar 0004
    c) Construct DateTime object with 23:59:59.999 29th Feb 4004
    d) Construct DateTime object with 00:00:00.000 1st Jan 1970
    e) Call toMillis() for each of the above objects and store results; these must be:
         i) 0
        ii) 60000
       iii) 126227980799999
        iv) 62035977600000
    f) Construct four new DateTime objects and initialise them with the above millisecond
       values using fromMillis(), these should be equal to those constructed earlier
    g) Attempt to initialise a DateTime object using fromMillis() with value
       126227980800000 - this must fail

11. DateTimeSpan construction and conversion operator
    Construction tests:
    a) With default constructor (value must be 0)
    b) From __int64 value 126227980799999
    c) From __int64 value -126227980799999
    d) From DateTime objects with values 00:00:00.000 1st Mar 0004 and
       23:59:59.999 29th Feb 4004 (value must be 126227980799999)
    e) From DateTime objects with values 23:59:59.999 29th Feb 4004 and
       00:00:00.000 1st Mar 0004 (value must be -126227980799999)
    f) Using copy constructor, from object constructed in d)
       (value must be 126227980799999)

12. DateTimeSpan getter functions
    a) Construct DateTimeSpan object from DateTime objects with values
       00:00:00.000 1st Mar 0004 and 23:59:59.999 29th Feb 4004
    b) Test days(), hours(), totalHours() etc.

13. DateTimeSpan setter functions
    a) Construct DateTimeSpan object with default constructor
    b) Call two-parameter set() function with DateTime objects with values
       00:00:00.000 1st Mar 0004 and 23:59:59.999 29th Feb 4004
       (value must be 126227980799999)
    c) Call two-parameter set() function with DateTime objects with values
       23:59:59.999 29th Feb 4004 and 00:00:00.000 1st Mar 0004
       (value must be -126227980799999)
    d) Call five-parameter set() function with value 10 for 'days', 12 for 'hrs',
       30 for 'mins', 59 for 'secs' and 765 for 'millis'
       (value must be 909059765)
    e) Call five-parameter set() function with value 10 for 'days', -12 for 'hrs',
       30 for 'mins', -59 for 'secs' and 765 for 'millis'
       (value must be 822541765)
    f) Call five-parameter set() function with value -10 for 'days', -12 for 'hrs',
       -30 for 'mins', -59 for 'secs' and -765 for 'millis'
       (value must be -909059765)

14. DateTimeSpan comparison operators
    a) Construct DateTimeSpan object 'a' with value 12345678
    b) Construct DateTimeSpan object 'b' with value 12345677
    c) operator==() must return true for (a == a) and (b == b) and false for
       (a == b) and (b == a)
    d) operator!=() must return true for (a != b) and (b != a) and false for
       (a != a) and (a != b)
    e) operator>() must return true for (a > b) and false for all other combinations
    f) operator>=() must return true for (a >= a), (a >= b) and (b >= b) and false
       for (b >= a)
    g) operator<() must return true for (b < a) and false for all other combinations
    h) operator<=() must return true for (a <= a), (b <= a) and (b <= b) and false
       for (a <= b)

15. DateTimeSpan assignment operator
    a) Construct DateTimeSpan object from DateTime objects with values
       00:00:00.000 1st Mar 0004 and 23:59:59.999 29th Feb 4004
    b) Construct DateTimeSpan object with default constructor
    c) Assign first DateTimeSpan object to second DateTimeSpan object
       (second object must have same value as first)

16. DateTimeSpan arithmetic operators
    a) Construct DateTimeSpan object 'a' with value 1000
    b) Construct DateTimeSpan object 'b' with value -3000
    c) Construct DateTimeSpan object 'c' with value 126227980799999
    d) Construct DateTimeSpan object 'd' with value -126227980799999
    e) Construct DateTimeSpan object 'e' with default constructor
    f) (e = a + b) must yield -2000 for e; a and b must be unchanged
    g) (e = a - b) must yield 4000 for e; a and b must be unchanged
    h) (e = c + b) must yield 126227980796999 for e; c and b must be
       unchanged
    i) (e = d - b) must yield -126227980796999 for e; d and b must be
       unchanged
    j) (a += b) must yield -2000 for a; b must be unchanged
    k) (b -= a) must yield -1000 for b; a must be unchanged
    l) (c += b) must yield 126227980798999 for c; b must be unchanged
    m) (a -= d) must yield 126227980797999 for a; d must be unchanged

17. DateTime arithmetic operators
    a) Construct DateTime object 'a' with 00:00:00.000 1st Mar 0004
    b) Construct DateTime object 'b' with 23:59:59.999 29th Feb 4004
    c) Construct DateTime object 'c' with default constructor
    d) Construct DateTime object 'd' with default constructor
    e) Construct DateTimeSpan object 'e' with value 126227980799999
    f) Construct DateTimeSpan object 'f' with value -126227980799999
    g) Construct DateTimeSpan object 'g' with value 62035977600000
    h) Construct DateTimeSpan object 'h' with value 1
    i) Construct DateTimeSpan object 'i' with value -1
    j) After (d = a + f), d must equal c; a and f must be unchanged
    k) After (d = a + e), d must equal b; a and e must be unchanged
    l) (d = a + i) must fail; all values must be unchanged
    m) (d = b + h) must fail; all values must be unchanged
    n) After (d = b - e), d must equal a; b and e must be unchanged
    o) After (d = c - g), d must equal a; c and g must be unchanged
    p) (d = a - h) must fail; all values must be unchanged
    q) (d = b + g) must fail; all values must be unchanged
    r) (a += i) must fail; all values must be unchanged
    s) (a += e) must yield (23:59:59.999 29th Feb 4004) for a; e must be unchanged
    t) (a += f) must yield (00:00:00.000 1st Mar 0004) for a; f must be unchanged
    u) (b -= h) must fail; all values must be unchanged
    v) (b -= e) must yield (00:00:00.000 1st Mar 0004) for b; e must be unchanged
    w) (b -= f) must yield (23:59:59.999 29th Feb 4004) for b; f must be unchanged
